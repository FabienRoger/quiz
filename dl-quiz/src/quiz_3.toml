[[questions]]
type = "MultipleChoice"
prompt.prompt = "We run the following code: <pre><code class=\"language-python\"> m = nn.Sigmoid() \nloss = nn.BCELoss() \ntarget = torch.empty(3).random_(2) \nprint(target) \ninput = torch.randn(3, requires_grad=True) \noptimizer = torch.optim.SGD([input], lr = 0.1) \nprint(m(input)) \nfor _ in range(10000): \n    output = loss(m(input), target) \n    optimizer.zero_grad()\n    output.backward()\n    optimizer.step()\nprint(xxxxxx)</code></pre>\n and obtain the following result: <pre><code class=\"language-python\"> tensor([0., 0., 1.])\ntensor([0.3517, 0.4834, 0.3328], grad_fn=<SigmoidBackward>)\ntensor([0.0030, 0.0030, 0.9970], grad_fn=<SigmoidBackward>)</code></pre>\n What was the last `print` command ?"
prompt.choices = [
    "`print(input)`",
    "`print(m(input))`",
    "`print(output)`"
]
answer.answer = 1
context = """
tbd 
"""

[[questions]]
type = "MultipleChoice"
prompt.prompt = "We run the following code: <pre><code class=\"language-python\">target = torch.empty(1,2,3).random_(2) \nprint(target) \ninput = torch.randn((1,2,3), requires_grad=True) \noptimizer = torch.optim.SGD([input], lr = 0.1) \nprint(m(input).size())</code></pre>\n and get <pre><code class=\"language-python\"> tensor([[[1., 1., 1.],\n         [0., 0., 1.]]])\ntorch.Size([1, 2, 3])</code></pre>\n we then run <pre><code class=\"language-python\">for _ in range(10000):\n    output = loss(m(input), target)\n    optimizer.zero_grad()\n    output.backward()\n    optimizer.step()</code></pre>\n Does it produce an error?"
prompt.choices = [
    "yes",
    "no"
]
answer.answer = 1
context = """
tbd
"""